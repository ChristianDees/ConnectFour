import randomclass RandomizedSet(object):    def __init__(self):        """        Initialize your data structure here.        """            # value (map) -> its index -> value (list)        self.d = {}        self.a = [] # introduce it purely for random        def add(self, val):        """        Inserts a value to the set. Returns true if the set did not already contain the specified element.        :type val: int        :rtype: bool        """        if val in self.d:          return False        self.a.append(val)        self.d[val] = len(self.a) - 1        return True        def remove(self, val):        """        Removes a value from the set. Returns true if the set contained the specified element.        :type val: int        :rtype: bool        """        if val not in self.d:          return False        index = self.d[val]            # process last index/val        self.a[index] = self.a[-1]        self.d[self.a[-1]] = index            # process to be deleted index/val        self.a.pop() # delete in list        del self.d[val] # delete in dict        # or, self.d.pop(val)        return True        def getRandom(self):        """        Get a random element from the set.        :rtype: int        """        return self.a[random.randrange(0, len(self.a))]    def __iter__(self):        # Make the set iterable by iterating over the values_list        for val in self.a:            yield val